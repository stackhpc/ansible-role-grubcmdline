---

- name: Check current kernel command line args
  command: cat /proc/cmdline
  register: result
  changed_when: false

- name: Determine if we need to update
  set_fact:
    old_cmdline: "{{ result.stdout.split() | select('search', kernel_cmdline_regex) | sort | list }}"

- name: Notify reboot handler
  debug:
    msg: Old command line was {{ result.stdout }}
  changed_when: old_cmdline != kernel_cmdline | sort | list
  notify: "{{ kernel_restart_handler }}"

- name: Slurp /etc/default/grub
  slurp:
    path: /etc/default/grub
  register: grub_result
  become: true

- name: Set fact containing GRUB_CMDLINE_LINUX_DEFAULT
  set_fact:
    grub_cmdline_linux_default: >-
      {{ grub_result.content | b64decode | regex_search('^GRUB_CMDLINE_LINUX_DEFAULT.*$', multiline=True)
      | regex_replace('^GRUB_CMDLINE_LINUX_DEFAULT="(.*)"$', '\1') }}

- debug:
    var: grub_cmdline_linux_default

- name: Determine which parameters need removing
  # We use a regex here so you can remove parameters regardless of their value, e.g to remove iommu=on you
  # could use the regex: ^iommu=
  set_fact:
    grub_cmdline_linux_remove: "{{ grub_cmdline_linux_default.split() | select('search', kernel_cmdline_remove_regex) | list }}"

- debug:
    var: grub_cmdline_linux_remove

- name: Updated kernel cmd line params
  set_fact:
    grub_cmdline_linux_new: "{{ grub_cmdline_linux_default.split() | difference(grub_cmdline_linux_remove) + kernel_cmdline }}"

- debug:
    var: grub_cmdline_linux_new

- name: Set GRUB_CMDLINE_LINUX_DEFAULT in /etc/default/grub
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT'
    line: GRUB_CMDLINE_LINUX_DEFAULT="{{ grub_cmdline_linux_new | join(' ') }}"
    backup: "{{ backup_grub_config_file }}"
  become: true

- name: Generate new grub-config
  command: grub2-mkconfig
  register: grub_mkconfig_result
  become: true
  changed_when: false

- name: Look for grub configuration files
  stat:
   path: "{{ item }}"
  register: grub_search
  become: true
  loop: "{{ grub_configuration_files }}"

- name: replace current grub config
  copy:
    backup: "{{ backup_grub_config_file }}"
    # /etc/grub2.cfg -> ../boot/grub2/grub.cfg
    follow: true
    content: "{{ grub_mkconfig_result.stdout }}"
    dest: "{{ item.stat.path }}"
  when: item.stat.exists
  become: true
  register: grub_update_result
  loop: "{{ grub_search.results }}"
  notify: "{{ kernel_restart_handler }}"
